from flask_wtf import FlaskForm
from wtforms import (
    StringField, TextAreaField, SelectField, 
    IntegerField, DateTimeField, FieldList, 
    FormField, FileField, BooleanField
)
from wtforms.validators import (
    DataRequired, NumberRange, Length, 
    ValidationError, Optional, InputRequired
)
from flask_wtf.file import FileAllowed, FileRequired
from flask_login import current_user
from datetime import datetime, timedelta
from wtforms.widgets import DateTimeInput

class CustomDateTimeField(DateTimeField):
    widget = DateTimeInput()
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.format = '%Y-%m-%dT%H:%M'  # HTML5 datetime-local format
    
    def process_formdata(self, valuelist):
        if not valuelist or not valuelist[0]:
            self.data = None
            return
            
        try:
            # Handle both with and without seconds
            for fmt in ('%Y-%m-%dT%H:%M', '%Y-%m-%dT%H:%M:%S'):
                try:
                    self.data = datetime.strptime(valuelist[0], fmt)
                    return
                except ValueError:
                    continue
            raise ValueError('Invalid datetime format')
        except (ValueError, TypeError) as e:
            self.data = None
            raise ValueError('Please enter a valid date and time')

class QuestionForm(FlaskForm):
    """
    Form for individual quiz questions with comprehensive validation
    """
    text = TextAreaField('Question Text', validators=[
        DataRequired(message="Question text is required"),
        Length(max=1000, message="Question cannot exceed 1000 characters")
    ], render_kw={
        'placeholder': 'Enter your question here...',
        'rows': 3
    })
    
    options = TextAreaField('Options (comma separated)', validators=[
        DataRequired(message="At least two options are required"),
        Length(max=500)
    ], render_kw={
        'placeholder': 'Option 1, Option 2, Option 3...',
        'rows': 2
    })
    
    correct_option = SelectField('Correct Answer', choices=[], validators=[
        DataRequired(message="Please select the correct answer")
    ])
    
    points = IntegerField('Points', validators=[
        DataRequired(message="Points value is required"),
        NumberRange(min=1, max=100, message="Points must be between 1-100")
    ], default=10, render_kw={
        'min': 1,
        'max': 100
    })
    
    time_limit = IntegerField('Time Limit (seconds)', validators=[
        DataRequired(message="Time limit is required"),
        NumberRange(min=10, max=3600, message="Time must be 10-3600 seconds")
    ], default=60, render_kw={
        'min': 10,
        'max': 3600
    })
    
    def validate_options(self, field):
        options = [opt.strip() for opt in field.data.split(',') if opt.strip()]
        if len(options) < 2:
            raise ValidationError("At least two options are required")
        
        # Update correct answer choices dynamically
        self.correct_option.choices = [(str(i), opt) for i, opt in enumerate(options)]

class QuizCreateForm(FlaskForm):
    """Complete quiz form with layered validation"""
    title = StringField('Quiz Title', validators=[
        DataRequired("Quiz title required"),
        Length(max=200)
    ], render_kw={'placeholder': 'Enter quiz title...'})
    
    description = TextAreaField('Description', validators=[
        Length(max=2000)
    ], render_kw={'rows': 3, 'placeholder': 'Optional description...'})
    
    subject_id = SelectField('Subject', coerce=int, validators=[
        DataRequired("Subject required")
    ], choices=[])
    
    classroom_id = SelectField('Classroom', coerce=int, validators=[
        DataRequired("Classroom required")
    ], choices=[])
    
    due_date = CustomDateTimeField('Due Date', validators=[
        DataRequired("Due date required")
    ], render_kw={
        'type': 'datetime-local',
        'min': (datetime.now() + timedelta(minutes=30)).strftime('%Y-%m-%dT%H:%M')
    })
    
    duration = IntegerField('Duration (minutes)', validators=[
        DataRequired(),
        NumberRange(min=5, max=360)
    ], default=30, render_kw={'min': 5, 'max': 360})
    
    questions = FieldList(
        FormField(QuestionForm),
        min_entries=1,
        validators=[InputRequired("At least one question required")]
    )

    def validate_questions(self, field):
        """Final question validation"""
        valid_questions = 0
        for question in field.entries:
            if (question.text.data.strip() and 
                len([opt.strip() for opt in question.options.data.split(',') if opt.strip()]) >= 2):
                valid_questions += 1
        
        if valid_questions == 0:
            raise ValidationError("Please add at least one complete question with text and options")
        
        
class AssignmentForm(FlaskForm):
    """
    Enhanced assignment form with multiple question input methods
    """
    title = StringField('Title', validators=[
        DataRequired(message="Title is required"),
        Length(max=200, message="Title cannot exceed 200 characters")
    ], render_kw={
        'placeholder': 'Assignment title...'
    })
    
    description = TextAreaField('Description', validators=[
        DataRequired(message="Description is required"),
        Length(max=5000, message="Description cannot exceed 5000 characters")
    ], render_kw={
        'placeholder': 'Detailed instructions...',
        'rows': 5
    })
    
    # Question input methods
    input_method = SelectField('Question Input Method', choices=[
        ('manual', 'Manual Entry'),
        ('file', 'Upload PDF'),
        ('bulk', 'Bulk Upload')
    ], default='manual')
    
    questions = TextAreaField('Questions', validators=[
        Optional(),
        Length(max=10000, message="Questions text too long")
    ], render_kw={
        'placeholder': 'Enter questions here...',
        'rows': 8,
        'data-input-method': 'manual'
    })
    
    question_file = FileField('Question File', validators=[
        Optional(),
        FileAllowed(['pdf'], 'Only PDF files are allowed')
    ], render_kw={
        'data-input-method': 'file',
        'accept': '.pdf'
    })
    
    bulk_questions = FileField('Bulk Questions', validators=[
        Optional(),
        FileAllowed(['csv', 'xlsx'], 'Only CSV or Excel files allowed')
    ], render_kw={
        'data-input-method': 'bulk',
        'accept': '.csv,.xlsx'
    })
    
    due_date = CustomDateTimeField('Due Date', 
        validators=[DataRequired(message="Due date is required")],
        render_kw={
            'type': 'datetime-local',
            'min': (datetime.now() + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%M')
        }
    )
    
    max_score = IntegerField('Maximum Score', validators=[
        DataRequired(message="Maximum score is required"),
        NumberRange(min=1, max=1000, message="Score must be 1-1000")
    ], default=100, render_kw={
        'min': 1,
        'max': 1000
    })
    
    subject_id = SelectField('Subject', coerce=int, validators=[
        DataRequired(message="Please select a subject")
    ], choices=[])
    
    classroom_id = SelectField('Classroom', coerce=int, validators=[
        DataRequired(message="Please select a classroom")
    ], choices=[])
    
    is_group = BooleanField('Group Assignment', default=False)
    allow_late = BooleanField('Allow Late Submissions', default=False)
    resubmit_allowed = BooleanField('Allow Resubmission', default=False)
    
    def validate(self, extra_validators=None):
        # First call the parent validation
        if not super().validate():
            return False
            
        # Validate at least one question input method is provided
        if not any([
            self.input_method.data == 'manual' and self.questions.data,
            self.input_method.data == 'file' and self.question_file.data,
            self.input_method.data == 'bulk' and self.bulk_questions.data
        ]):
            if self.input_method.data == 'manual':
                self.questions.errors.append('Please enter questions')
            elif self.input_method.data == 'file':
                self.question_file.errors.append('Please upload a file')
            else:
                self.bulk_questions.errors.append('Please upload a file')
            return False
            
        return True

class SubmissionForm(FlaskForm):
    """
    Comprehensive submission form with multiple attachment options
    """
    content = TextAreaField('Your Answer', validators=[
        Optional(),
        Length(max=10000, message="Answer cannot exceed 10,000 characters")
    ], render_kw={
        'placeholder': 'Type your answer here...',
        'rows': 8
    })
    
    file = FileField('Attachment', validators=[
        Optional(),
        FileAllowed(
            ['pdf', 'docx', 'txt', 'zip', 'pptx', 'png', 'jpg', 'jpeg'],
            'Allowed types: PDF, Word, Text, ZIP, PowerPoint, PNG, JPG'
        )
    ], render_kw={
        'accept': '.pdf,.docx,.txt,.zip,.pptx,.png,.jpg,.jpeg'
    })
    
    confirm = BooleanField('I confirm this is my own work', validators=[
        DataRequired(message="You must confirm this is your own work")
    ])
    
    def validate(self, extra_validators=None):
        if not super().validate():
            return False
            
        # Require either text content or a file
        if not self.content.data and not self.file.data:
            self.content.errors.append('Please provide either text or a file')
            return False
            
        return True