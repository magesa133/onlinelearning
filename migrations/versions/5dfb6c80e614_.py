"""empty message

Revision ID: 5dfb6c80e614
Revises: 6549eeb97257
Create Date: 2025-04-19 14:57:12.186157

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision = '5dfb6c80e614'
down_revision = '6549eeb97257'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # Handle questions table foreign key
    with op.batch_alter_table('questions', schema=None) as batch_op:
        # Check if foreign key exists before trying to drop it
        fks = inspector.get_foreign_keys('questions')
        fk_exists = any(fk['name'] == 'fk_questions_quiz_id' for fk in fks)
        
        if fk_exists:
            batch_op.drop_constraint('fk_questions_quiz_id', type_='foreignkey')
        batch_op.create_foreign_key(None, 'quizzes', ['quiz_id'], ['id'])

    # Handle quizzes table modifications
    with op.batch_alter_table('quizzes', schema=None) as batch_op:
        # Check if column exists before adding
        columns = [col['name'] for col in inspector.get_columns('quizzes')]
        
        if 'max_attempts' not in columns:
            batch_op.add_column(sa.Column('max_attempts', sa.Integer(), nullable=True))
        
        # Check if index exists before dropping
        indexes = inspector.get_indexes('quizzes')
        index_exists = any(idx['name'] == 'ix_quizzes_id' for idx in indexes)
        
        if index_exists:
            batch_op.drop_index('ix_quizzes_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    with op.batch_alter_table('quizzes', schema=None) as batch_op:
        # Check if index doesn't exist before creating
        indexes = inspector.get_indexes('quizzes')
        ix_id_exists = any(idx['name'] == 'ix_quizzes_id' for idx in indexes)
        ix_teacher_exists = any(idx['name'] == 'ix_quiz_teacher_id' for idx in indexes)
        
        if not ix_id_exists:
            batch_op.create_index('ix_quizzes_id', ['id'], unique=True)
        if not ix_teacher_exists:
            batch_op.create_index('ix_quiz_teacher_id', ['teacher_id'], unique=False)
        
        # Check if column exists before dropping
        columns = [col['name'] for col in inspector.get_columns('quizzes')]
        if 'max_attempts' in columns:
            batch_op.drop_column('max_attempts')

    with op.batch_alter_table('questions', schema=None) as batch_op:
        # Get the name of the current foreign key constraint
        fks = inspector.get_foreign_keys('questions')
        current_fk_name = next(
            (fk['name'] for fk in fks 
             if fk['referred_table'] == 'quizzes' and fk['constrained_columns'] == ['quiz_id']),
            None
        )
        
        if current_fk_name:
            batch_op.drop_constraint(current_fk_name, type_='foreignkey')
        batch_op.create_foreign_key('fk_questions_quiz_id', 'quizzes', ['quiz_id'], ['id'], ondelete='CASCADE')

    # ### end Alembic commands ###