Aid: 7mboqqDvQPqMbwhTfilARg
Cid: WjFS7nrRs6uQXWl2yY4g
Csecrete: 4Jmit49UErMk8fs3D64Hv39qj0Yxqlyp



Secret Token
zTHsVpklQj6VfVcpqi3hCQ

Verification Token (Retires in February 2025)
QjTWBh-nR0y8H-D7UuEkPw





@app.route('/video_conference')
@login_required
def video_conference():
    try:
        classes = Classroom.query.all()
        sessions = OnlineSession.query.filter_by(creator_id=current_user.id).order_by(OnlineSession.start_time.desc()).all()

        now_utc = datetime.now(timezone.utc)
        
        for session in sessions:
            # Ensure timezone awareness
            session._ensure_timezone_awareness()
            
            # Update status using the new get_status method
            session.status = session.get_status(now_utc)
            
            # Calculate local times
            tz = ZoneInfo(session.original_timezone or current_user.timezone or 'Africa/Dar_es_Salaam')
            session.start_local = session.start_time.astimezone(tz)
            session.end_local = session.end_time.astimezone(tz) if session.end_time else None

        return render_template(
            'video_conference.html',
            classes=classes,
            sessions=sessions,
            now_utc=now_utc,
            server_time=now_utc.strftime('%b %d, %Y %H:%M:%S UTC'),
            dar_time_str=now_utc.astimezone(ZoneInfo("Africa/Dar_es_Salaam")).strftime('%b %d, %Y %H:%M:%S EAT'),
            csrf_token=flask_session.get('_csrf_token'),
            user_timezone=current_user.timezone or 'Africa/Dar_es_Salaam'
        )

    except Exception as e:
        current_app.logger.error(f"Video conference error: {e}")
        return render_template('error.html', message="Failed to load sessions"), 500



































{% extends 'teacher_dashboard.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Online Sessions</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <style>
        .main-content {
            margin: 20px auto;
            padding: 20px;
            max-width: 800px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
        }
        h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        button {
            margin: 10px 0;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background: #007bff;
            color: white;
        }
        button:hover {
            background: #0056b3;
        }
        .hidden {
            display: none;
        }
        .time-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .time-inputs input {
            padding: 5px 10px;
            font-size: 16px;
        }
        #generatedLink {
            font-weight: bold;
            color: #007bff;
        }
        #root {
            width: 100%;
            height: 400px;
            position: relative;
            margin-top: 20px;
        }
        .expired-message {
            color: red;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h2>Manage Online Sessions</h2>

        <!-- Button to toggle time inputs -->
        <div>
            <button id="setTimeButton" onclick="toggleTimeInputs()">Set Time</button>
        </div>

        <!-- Time input fields, hidden by default -->
        <div class="time-inputs hidden" id="time-inputs">
            <div>
                <label for="start-time">Start Time: </label>
                <input type="datetime-local" id="start-time" required>
            </div>
            <div>
                <label for="end-time">End Time: </label>
                <input type="datetime-local" id="end-time" required>
            </div>
        </div>

        <!-- Button to create a session, hidden by default -->
        <button onclick="createSession()" id="createSessionBtn" class="hidden">Create New Session</button>

        <p>Generated Link: <span id="generatedLink">None</span></p>
        <button class="fullscreen-button" onclick="toggleFullScreen()">Toggle Fullscreen</button>

        <!-- Manual Room ID entry -->
        <div class="manual-entry">
            <label for="roomID">Enter Room ID:</label>
            <input type="text" id="roomID" placeholder="Enter Room ID">
            <button onclick="joinTeacherSession()">Join Session</button>
        </div>

        <!-- Session root container -->
        <div id="root"></div>

        <!-- Expired session message -->
        <div id="expiredMessage" class="expired-message" style="display: none;">
            The session has expired and cannot be joined anymore.
        </div>
    </div>

    <script>
        function toggleTimeInputs() {
            const timeInputs = document.getElementById('time-inputs');
            const createSessionBtn = document.getElementById('createSessionBtn');
            const setTimeButton = document.getElementById('setTimeButton');

            // Toggle visibility
            if (timeInputs.classList.contains('hidden')) {
                timeInputs.classList.remove('hidden');
                createSessionBtn.classList.remove('hidden');
                setTimeButton.textContent = "Hide Time Settings";
            } else {
                timeInputs.classList.add('hidden');
                createSessionBtn.classList.add('hidden');
                setTimeButton.textContent = "Set Time";
            }
        }

        async function createSession() {
            const roomID = "room-" + Math.floor(Math.random() * 10000);
            const sessionName = "Session " + roomID;
            const sessionLink = `${window.location.origin}/join_session/${roomID}`;
            const linkDisplay = document.getElementById('generatedLink');

            // Get start and end time from input fields
            const startTime = document.getElementById('start-time').value;
            const endTime = document.getElementById('end-time').value;

            // Validate time inputs
            if (!startTime || !endTime) {
                alert("Please set both start and end times.");
                return;
            }

            // Format the time into a readable format
            const formattedStartTime = new Date(startTime).toLocaleString();
            const formattedEndTime = new Date(endTime).toLocaleString();

            // Store session data in localStorage
            localStorage.setItem('sessionLink', sessionLink);
            localStorage.setItem('sessionEndTime', endTime);

            // Hide the time inputs and button after session creation
            document.getElementById('time-inputs').classList.add('hidden');
            document.getElementById('createSessionBtn').classList.add('hidden');

            // Display the generated session link
            const currentTime = new Date().toISOString().slice(0, 16); 
            if (new Date(endTime) > new Date(currentTime)) {
                linkDisplay.textContent = `Session Link: ${sessionLink} (Start: ${formattedStartTime}, End: ${formattedEndTime})`;
                linkDisplay.href = sessionLink;
            } else {
                linkDisplay.textContent = "Session ended or no active session.";
            }

            // Notify the teacher
            alert(`Session created successfully! Share this link with students: ${sessionLink}`);

            // Send the session data to the backend
            try {
                const response = await fetch('/create_session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        roomID: roomID,
                        sessionName: sessionName,
                        sessionLink: sessionLink,
                        startTime: startTime,
                        endTime: endTime,
                    }),
                });

                const data = await response.json();
                if (response.ok) {
                    console.log('Session saved successfully:', data);
                } else {
                    console.error('Failed to save session:', data);
                }
            } catch (error) {
                console.error('Error while saving session:', error);
            }

            // Initialize the session if it has started
            if (new Date(startTime) <= new Date(currentTime) && new Date(endTime) >= new Date(currentTime)) {
                initializeSession(roomID);
            }
        }

        function initializeSession(roomID) {
            try {
                const userID = Math.floor(Math.random() * 10000) + "";
                const userName = "{{ username | default('Teacher') }}";
                const appID = 1271126531;
                const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";
                const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

                const zp = ZegoUIKitPrebuilt.create(kitToken);
                zp.joinRoom({
                    container: document.querySelector("#root"),
                    scenario: {
                        mode: ZegoUIKitPrebuilt.VideoConference,
                    },
                    sharedLinks: [{
                        name: 'Session link',
                        url: `${window.location.origin}/student_dashboard?roomID=${roomID}`,
                    }],
                });
            } catch (error) {
                console.error("Error initializing the session:", error);
                alert("Failed to initialize the session. Please try again.");
            }
        }

        function joinTeacherSession() {
            const roomID = document.getElementById('roomID').value.trim();
            if (roomID) {
                initializeSession(roomID);
            } else {
                alert("Please enter a valid Room ID.");
            }
        }

        function toggleFullScreen() {
            const elem = document.querySelector("#root");
            if (!document.fullscreenElement) {
                elem.requestFullscreen().catch(err => {
                    console.warn(`Error attempting to enable full-screen mode: ${err.message}`);
                });
            } else {
                document.exitFullscreen();
            }
        }

        window.onload = function() {
            const sessionLink = localStorage.getItem('sessionLink');
            const sessionEndTime = localStorage.getItem('sessionEndTime');
            const currentTime = new Date();

            if (sessionLink && new Date(sessionEndTime) > currentTime) {
                document.getElementById('generatedLink').textContent = sessionLink;
                document.getElementById('generatedLink').href = sessionLink;
                document.getElementById('expiredMessage').style.display = 'none';
            } else {
                document.getElementById('generatedLink').textContent = "Session ended or no active session.";
                document.getElementById('expiredMessage').style.display = 'block';
                localStorage.removeItem('sessionLink');
                localStorage.removeItem('sessionEndTime');
            }
        }
    </script>
</body>
</html>
{% endblock %}































{% extends 'teacher_dashboard.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Online Sessions</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <style>
        .main-content {
            margin: 20px auto;
            padding: 20px;
            max-width: 800px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
        }
        h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        button {
            margin: 10px 0;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background: #007bff;
            color: white;
        }
        button:hover {
            background: #0056b3;
        }
        #generatedLink {
            font-weight: bold;
            color: #007bff;
        }
        #root {
            width: 100%;
            height: 400px;
            position: relative;
            margin-top: 20px;
        }
        .time-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .time-inputs input {
            padding: 5px 10px;
            font-size: 16px;
        }
        .time-inputs.hidden {
            display: none;
        }
        .expired-message {
            color: red;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h2>Manage Online Sessions</h2>

        <!-- Time input section for setting start and end times, visible only during session creation -->
        <div class="time-inputs" id="time-inputs">
            <div>
                <label for="start-time">Start Time: </label>
                <input type="datetime-local" id="start-time" required>
            </div>
            <div>
                <label for="end-time">End Time: </label>
                <input type="datetime-local" id="end-time" required>
            </div>
        </div>

        <button onclick="createSession()" id="createSessionBtn">Create New Session</button>
        <p>Generated Link: <span id="generatedLink">None</span></p>
        <button class="fullscreen-button" onclick="toggleFullScreen()">Toggle Fullscreen</button>
        
        <!-- Input for manual Room ID entry -->
        <div class="manual-entry">
            <label for="roomID">Enter Room ID:</label>
            <input type="text" id="roomID" placeholder="Enter Room ID">
            <button onclick="joinTeacherSession()">Join Session</button>
        </div>

        <!-- Zego UI container -->
        <div id="root"></div>
        
        <!-- Expired message -->
        <div id="expiredMessage" class="expired-message" style="display: none;">
            The session has expired and cannot be joined anymore.
        </div>
    </div>

    <script>
    async function createSession() {
        const roomID = "room-" + Math.floor(Math.random() * 10000);
        const sessionName = "Session " + roomID; // Or fetch this from the UI
        const sessionLink = `${window.location.origin}/join_session/${roomID}`;
        const linkDisplay = document.getElementById('generatedLink');

        // Get start and end time from input fields
        const startTime = document.getElementById('start-time').value;
        const endTime = document.getElementById('end-time').value;

        // Validate time inputs
        if (!startTime || !endTime) {
            alert("Please set both start and end times.");
            return;
        }

        // Store session data in localStorage to persist even after page reload
        localStorage.setItem('sessionLink', sessionLink);
        localStorage.setItem('sessionEndTime', endTime);

        // Hide time inputs after session creation
        document.getElementById('time-inputs').classList.add('hidden');
        document.getElementById('createSessionBtn').classList.add('hidden');

        // Display the generated session link if session is active
        const currentTime = new Date().toISOString().slice(0, 16); // Get current date and time in format 'YYYY-MM-DDTHH:mm'
        if (new Date(endTime) > new Date(currentTime)) {
            linkDisplay.textContent = sessionLink;
            linkDisplay.href = sessionLink; // Make it clickable
        } else {
            linkDisplay.textContent = "Session ended or no active session.";
        }

        // Notify the teacher
        alert(`Session created successfully! Share this link with students: ${sessionLink}`);

        // Send the session data to the backend
        try {
            const response = await fetch('/create_session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    roomID: roomID,
                    sessionName: sessionName,  // Optional name of the session
                    sessionLink: sessionLink,  // Generated session link
                    startTime: startTime,      // Start time for the session
                    endTime: endTime,          // End time for the session
                }),
            });

            const data = await response.json();
            if (response.ok) {
                console.log('Session saved successfully:', data);
            } else {
                console.error('Failed to save session:', data);
            }
        } catch (error) {
            console.error('Error while saving session:', error);
        }

        // Initialize the session if it has started
        if (new Date(startTime) <= new Date(currentTime) && new Date(endTime) >= new Date(currentTime)) {
            initializeSession(roomID);
        }
    }

    function initializeSession(roomID) {
        try {
            const userID = Math.floor(Math.random() * 10000) + "";
            const userName = "{{ username | default('Teacher') }}";
            const appID = 1271126531;
            const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";
            const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

            const zp = ZegoUIKitPrebuilt.create(kitToken);
            zp.joinRoom({
                container: document.querySelector("#root"),
                scenario: {
                    mode: ZegoUIKitPrebuilt.VideoConference,
                },
                sharedLinks: [{
                    name: 'Session link',
                    url: `${window.location.origin}/student_dashboard?roomID=${roomID}`,
                }],
            });
        } catch (error) {
            console.error("Error initializing the session:", error);
            alert("Failed to initialize the session. Please try again.");
        }
    }

    function joinTeacherSession() {
        const roomID = document.getElementById('roomID').value.trim();
        if (roomID) {
            initializeSession(roomID);  // Call initializeSession function to join the room
        } else {
            alert("Please enter a valid Room ID.");
        }
    }

    function toggleFullScreen() {
        const elem = document.querySelector("#root");
        if (!document.fullscreenElement) {
            elem.requestFullscreen().catch(err => {
                console.warn(`Error attempting to enable full-screen mode: ${err.message}`);
            });
        } else {
            document.exitFullscreen();
        }
    }

    // On page load, check if the session link exists in localStorage
    // On page load, check if the session link exists in localStorage
window.onload = function() {
    const sessionLink = localStorage.getItem('sessionLink');
    const sessionEndTime = localStorage.getItem('sessionEndTime');
    const currentTime = new Date(); // Current time

    // Hide the link and show a message if the session has ended
    if (sessionLink && new Date(sessionEndTime) > currentTime) {
        document.getElementById('generatedLink').textContent = sessionLink;
        document.getElementById('generatedLink').href = sessionLink;
        document.getElementById('expiredMessage').style.display = 'none';  // Hide expired message
    } else {
        document.getElementById('generatedLink').textContent = "Session ended or no active session.";
        document.getElementById('expiredMessage').style.display = 'block';  // Show expired message
        localStorage.removeItem('sessionLink');
        localStorage.removeItem('sessionEndTime');
    }
}

    </script>
</body>
</html>
{% endblock %}














{% extends 'teacher_dashboard.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Online Sessions</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">

    <!-- Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    
    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <style>
        .main-content {
            margin: 20px auto;
            padding: 20px;
            max-width: 800px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
        }
        h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        button {
            margin: 10px 0;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background: #007bff;
            color: white;
        }
        button:hover {
            background: #0056b3;
        }
        #generatedLink {
            font-weight: bold;
            color: #007bff;
        }
        #root {
            width: 100%;
            height: 400px;
            position: relative;
            margin-top: 20px;
        }
        .time-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .time-inputs input {
            padding: 5px 10px;
            font-size: 16px;
        }
        .expired-message {
            color: red;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h2>Manage Online Sessions</h2>

        <!-- Time input section for setting start and end times -->
        <div class="time-inputs" id="time-inputs">
            <div>
                <label for="start-time">Start Time: </label>
                <input type="text" id="start-time" required>
            </div>
            <div>
                <label for="end-time">End Time: </label>
                <input type="text" id="end-time" required>
            </div>
        </div>

        <button onclick="createSession()" id="createSessionBtn">Create New Session</button>
        <p>Generated Link: <span id="generatedLink">None</span></p>

        <div class="manual-entry">
            <label for="roomID">Enter Room ID:</label>
            <input type="text" id="roomID" placeholder="Enter Room ID">
            <button onclick="joinSession()">Join Session</button>
        </div>

        <!-- Zego UI container -->
        <div id="root"></div>
        
        <!-- Expired message -->
        <div id="expiredMessage" class="expired-message" style="display: none;">
            The session has expired and cannot be joined anymore.
        </div>
    </div>

    <script>
        // Initialize Flatpickr for datetime inputs
        document.addEventListener("DOMContentLoaded", function() {
            flatpickr("#start-time", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
            });

            flatpickr("#end-time", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
            });
        });

        // Generate Room ID and handle session creation
        async function createSession() {
            const roomID = "room-" + Math.floor(Math.random() * 10000);
            const sessionName = "Session " + roomID; // Optional session name
            const sessionLink = `${window.location.origin}/join_session/${roomID}`;
            const linkDisplay = document.getElementById('generatedLink');

            // Get start and end time from input fields
            const startTime = document.getElementById('start-time').value;
            const endTime = document.getElementById('end-time').value;

            // Validate time inputs
            if (!startTime || !endTime) {
                alert("Please set both start and end times.");
                return;
            }

            // Store session data in localStorage to persist even after page reload
            localStorage.setItem('sessionLink', sessionLink);
            localStorage.setItem('sessionEndTime', endTime);

            // Display the generated session link if session is active
            const currentTime = new Date().toISOString().slice(0, 16);
            if (new Date(endTime) > new Date(currentTime)) {
                linkDisplay.textContent = sessionLink;
                linkDisplay.href = sessionLink;
            } else {
                linkDisplay.textContent = "Session ended or no active session.";
            }

            // Notify the teacher
            alert(`Session created successfully! Share this link with students: ${sessionLink}`);

            // Send the session data to the backend
            try {
                const response = await fetch('/create_session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        roomID: roomID,
                        sessionName: sessionName,
                        sessionLink: sessionLink,
                        startTime: startTime,
                        endTime: endTime,
                    }),
                });

                const data = await response.json();
                if (response.ok) {
                    console.log('Session saved successfully:', data);
                } else {
                    console.error('Failed to save session:', data);
                }
            } catch (error) {
                console.error('Error while saving session:', error);
            }

            // Initialize the session if it is within the active time range
            const currentDateTime = new Date();
            if (new Date(startTime) <= currentDateTime && new Date(endTime) >= currentDateTime) {
                initializeSession(roomID);
            }
        }

        // Initialize Zego session
        function initializeSession(roomID) {
            try {
                const userID = Math.floor(Math.random() * 10000) + "";
                const userName = "Teacher";
                const appID = 1271126531;
                const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";
                const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

                if (!kitToken) {
                    throw new Error("Failed to generate kit token.");
                }

                const zp = ZegoUIKitPrebuilt.create(kitToken);
                zp.joinRoom({
                    container: document.querySelector("#root"),
                    scenario: {
                        mode: ZegoUIKitPrebuilt.VideoConference,
                    },
                    sharedLinks: [{
                        name: 'Session link',
                        url: `${window.location.origin}/student_dashboard?roomID=${roomID}`,
                    }],
                    turnOnMicrophoneWhenJoining: true,
                    turnOnCameraWhenJoining: true,
                    showMyCameraToggleButton: true,
                    showMyMicrophoneToggleButton: true,
                    showAudioVideoSettingsButton: true,
                    showScreenSharingButton: true,
                    showTextChat: true,
                    showUserList: true,
                    maxUsers: 50,
                    layout: "Sidebar",
                    showLayoutButton: true,
                });
            } catch (error) {
                console.error("Error initializing session:", error);
                alert("Failed to initialize the session. Please try again.");
            }
        }

        // Join an existing session by Room ID
        function joinSession() {
            const roomID = document.getElementById('roomID').value.trim();
            if (roomID) {
                initializeSession(roomID);  // Join the room
            } else {
                alert("Please enter a valid Room ID.");
            }
        }

        // On page load, check if the session link exists in localStorage
        window.onload = function() {
            const sessionLink = localStorage.getItem('sessionLink');
            const sessionEndTime = localStorage.getItem('sessionEndTime');
            const currentTime = new Date();

            // Hide the link and show a message if the session has ended
            if (sessionLink && new Date(sessionEndTime) > currentTime) {
                document.getElementById('generatedLink').textContent = sessionLink;
                document.getElementById('generatedLink').href = sessionLink;
                document.getElementById('expiredMessage').style.display = 'none';
            } else {
                document.getElementById('generatedLink').textContent = "Session ended or no active session.";
                document.getElementById('expiredMessage').style.display = 'block';
                localStorage.removeItem('sessionLink');
                localStorage.removeItem('sessionEndTime');
            }
        };
    </script>
</body>
</html>
{% endblock %}
































from flask import render_template, redirect, url_for, request, flash, jsonify
from flask_login import login_user, login_required, logout_user, current_user
from werkzeug.security import check_password_hash, generate_password_hash
from app import app, db
from models import User, OnlineSession, Assignment, Quiz, Class, Question, Teacher, Department
from datetime import datetime

# ---------- HOME AND DASHBOARDS ----------

# Home Route
@app.route('/')
def index():
    return render_template('index.html')

# Video Conference Route
@app.route('/video_conference')
@login_required
def video_conference():
    return render_template('video_conference.html', username=current_user.username)

# Student Dashboard Route
@app.route('/student_dashboard')
@login_required
def student_dashboard():
    if current_user.role != 'student':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    sessions = OnlineSession.query.order_by(OnlineSession.created_at.desc()).all()
    return render_template('student_dashboard.html', sessions=sessions, username=current_user.username)

@app.route('/join_session/<room_id>')
@login_required
def join_session(room_id):
    # Logic to handle joining a session using room_id
    return render_template('student/join.html', room_id=room_id)


# Teacher Dashboard Route
@app.route('/teacher_dashboard')
@login_required
def teacher_dashboard():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    classes = Class.query.filter_by(teacher_id=current_user.id).all()
    return render_template('teacher_dashboard.html', username=current_user.username, classes=classes)

# Admin Dashboard Route
@app.route('/admin_dashboard')
@login_required
def admin_dashboard():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    teachers = User.query.filter_by(role='teacher').all()
    students = User.query.filter_by(role='student').all()
    classes = Class.query.all()  # Adjust as needed for class data

    return render_template('admin_dashboard.html', username=current_user.username, teachers=teachers, students=students, classes=classes)

# ---------- AUTHENTICATION ----------

# Login Route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email').strip()
        password = request.form.get('password').strip()
        user = User.query.filter_by(email=email).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('Login successful!', 'success')

            # Redirect based on user role (student, teacher, or admin)
            if user.role == 'student':
                return redirect(url_for('student_dashboard'))
            elif user.role == 'teacher':
                return redirect(url_for('teacher_dashboard'))
            elif user.role == 'admin':
                return redirect(url_for('admin_dashboard'))

        flash('Invalid email or password!', 'danger')

    return render_template('login.html')

# Registration Route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username').strip().capitalize()
        email = request.form.get('email').strip()
        password = request.form.get('password').strip()
        confirm_password = request.form.get('confirm_password').strip()

        if password != confirm_password:
            flash('Passwords do not match!', 'danger')
            return redirect(url_for('register'))

        if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
            flash('Username or email already exists!', 'danger')
            return redirect(url_for('register'))

        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_user = User(username=username, email=email, password=hashed_password, role='student')
        db.session.add(new_user)
        db.session.commit()

        login_user(new_user)
        flash('Registration successful!', 'success')
        return redirect(url_for('student_dashboard'))

    return render_template('register.html')

# Logout Route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

# ---------- SESSION MANAGEMENT ----------

# Start Online Session (Teacher)
@app.route('/start_session', methods=['POST'])
@login_required
def start_session():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    try:
        room_id = f"room-{int(datetime.now().timestamp())}"
        session_name = request.form.get('session_name', 'Default Session Name')
        session_link = f"{request.host_url}join_session/{room_id}"

        session = OnlineSession(
            room_id=room_id,
            session_name=session_name,
            session_link=session_link,
            created_by=current_user.id,
            start_time=datetime.utcnow(),
            end_time=datetime.utcnow()
        )
        db.session.add(session)
        db.session.commit()

        return jsonify({'roomID': room_id, 'sessionLink': session_link}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# ---------- QUIZZES AND ASSIGNMENTS ----------

# Create Assignment (Teacher)
@app.route('/create_assignment', methods=['GET', 'POST'])
@login_required
def create_assignment():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        title = request.form.get('title')
        description = request.form.get('description')
        due_date = request.form.get('due_date')
        class_id = request.form.get('class_id')

        assignment = Assignment(
            title=title,
            description=description,
            due_date=datetime.strptime(due_date, '%Y-%m-%d'),
            class_id=class_id,
            created_by=current_user.id
        )
        db.session.add(assignment)
        db.session.commit()

        flash('Assignment created successfully!', 'success')
        return redirect(url_for('teacher_dashboard'))

    classes = Class.query.filter_by(teacher_id=current_user.id).all()
    return render_template('teacher/create_assignment.html', classes=classes)

# Add Quiz (Teacher)
@app.route('/add_quiz/<int:session_id>', methods=['GET', 'POST'])
@login_required
def add_quiz(session_id):
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        title = request.form.get('title')
        questions = request.form.getlist('questions')
        options = request.form.getlist('options')
        correct_answers = request.form.getlist('correct_answers')

        quiz = Quiz(title=title, session_id=session_id, class_id=None)
        db.session.add(quiz)
        db.session.flush()

        for question, option, correct_answer in zip(questions, options, correct_answers):
            question_obj = Question(
                text=question,
                options=option,
                correct_option=correct_answer,
                quiz_id=quiz.id
            )
            db.session.add(question_obj)

        db.session.commit()
        flash('Quiz added successfully!', 'success')
        return redirect(url_for('teacher_dashboard'))

    return render_template('add_quiz.html', session_id=session_id)

# ---------- ADMIN MANAGEMENT ----------

# Add Teacher (Admin)
@app.route('/add_teacher', methods=['GET', 'POST'])
@login_required
def add_teacher():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    departments = Department.query.all()

    if request.method == 'POST':
        username = request.form.get('username').strip()
        email = request.form.get('email').strip()
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        teacher_name = request.form.get('teacher_name').strip()
        subject = request.form.get('subject').strip()
        department_id = request.form.get('department')

        errors = []

        if not username or not email or not password or not confirm_password or not teacher_name or not subject or not department_id:
            errors.append("All fields are required.")
        if password != confirm_password:
            errors.append("Passwords do not match.")

        existing_user = User.query.filter((User.username == username) | (User.email == email)).first()
        if existing_user:
            errors.append("A user with this username or email already exists.")

        if errors:
            return render_template('admin/add_teacher.html', errors=errors, departments=departments, form_data={
                'username': username, 'email': email, 'teacher_name': teacher_name, 'subject': subject, 'department_id': department_id})

        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_teacher_user = User(username=username, email=email, password=hashed_password, role='teacher')
        db.session.add(new_teacher_user)
        db.session.commit()

        teacher = Teacher(user_id=new_teacher_user.id, teacher_name=teacher_name, subject=subject, department_id=department_id)
        db.session.add(teacher)
        db.session.commit()

        flash('Teacher added successfully!', 'success')
        return redirect(url_for('add_teacher'))

    return render_template('admin/add_teacher.html', departments=departments)

# Add Department (Admin)
@app.route('/add_department', methods=['GET', 'POST'])
@login_required
def add_department():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        name = request.form.get('name').strip()
        description = request.form.get('description').strip()

        if Department.query.filter_by(name=name).first():
            flash('Department already exists!', 'danger')
            return render_template('admin/add_department.html')

        new_department = Department(name=name, description=description)
        db.session.add(new_department)
        db.session.commit()

        flash('Department added successfully!', 'success')
        return render_template('admin/add_department.html')

    return render_template('admin/add_department.html')

# View Departments (Admin)
@app.route('/departments', methods=['GET'])
@login_required
def view_departments():
    if current_user.role != 'admin':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    departments = Department.query.all()
    return render_template('admin/view_departments.html', departments=departments)

# Delete Department (Admin)
@app.route('/delete_department/<int:id>', methods=['POST'])
@login_required
def delete_department(id):
    if current_user.role != 'admin':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    department = Department.query.get_or_404(id)
    db.session.delete(department)
    db.session.commit()

    flash('Department deleted successfully!', 'success')
    return redirect(url_for('view_departments'))

# Add Class (Admin)
@app.route('/add_class', methods=['GET', 'POST'])
@login_required
def add_class():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    teachers = Teacher.query.all()

    if request.method == 'POST':
        class_name = request.form.get('class_name', '').strip()
        subject = request.form.get('subject', '').strip()
        teacher_id = request.form.get('teacher_id')

        if not class_name or not subject or not teacher_id:
            flash('All fields are required. Please fill out the form correctly.', 'danger')
            return render_template('admin/add_class.html', teachers=teachers)

        try:
            teacher = Teacher.query.get(teacher_id)
            if not teacher:
                flash('Invalid teacher selected.', 'danger')
                return render_template('admin/add_class.html', teachers=teachers)

            existing_class = Class.query.filter_by(name=class_name).first()
            if existing_class:
                flash(f'A class with the name "{class_name}" already exists!', 'danger')
                return render_template('admin/add_class.html', teachers=teachers)

            new_class = Class(name=class_name, subject=subject, teacher_id=teacher_id)
            db.session.add(new_class)
            db.session.commit()

            flash(f'Class "{class_name}" added successfully!', 'success')
            return redirect(url_for('add_class'))

        except Exception as e:
            db.session.rollback()
            flash(f'Error: {str(e)}', 'danger')
            return render_template('admin/add_class.html', teachers=teachers)

    return render_template('admin/add_class.html', teachers=teachers)


















{% extends 'student_dashboard.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Online Session</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .main-content {
            margin: 20px auto;
            max-width: 800px;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }
        h2 {
            text-align: center;
        }
        p {
            font-size: 16px;
            color: #555;
        }
        .status-message {
            font-size: 18px;
            color: #007bff;
            margin: 10px 0;
        }
        .error-message {
            color: red;
            font-weight: bold;
        }
        .input-group {
            margin: 10px 0;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
        }
        .input-group input {
            width: 100%;
            padding: 8px;
            font-size: 16px;
        }
        #joinSessionButton {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #joinSessionButton:hover {
            background-color: #0056b3;
        }
        #root {
            width: 100%;
            height: 400px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h2>Join Online Session: {{ session.session_name }}</h2>

        <div id="statusMessage" class="status-message">Checking session status...</div>
        <div id="errorMessage" class="error-message" style="display: none;"></div>

        <div class="input-group">
            <label for="roomIDInput">Enter Room ID:</label>
            <input type="text" id="roomIDInput" placeholder="Enter Room ID" value="{{ session.room_id }}">
        </div>

        <button id="joinSessionButton" onclick="joinSession()" style="display: none;">Join Session</button>
        <div id="root" style="display: none;"></div>
    </div>

    <script>
        let zp; // Declare Zego instance globally

        window.onload = function () {
            const statusMessage = document.getElementById('statusMessage');
            const errorMessage = document.getElementById('errorMessage');
            const joinSessionButton = document.getElementById('joinSessionButton');
            const rootContainer = document.getElementById('root');

            // Session timing details
            const sessionStartTime = new Date("{{ session.start_time | default('') }}");
            const sessionEndTime = new Date("{{ session.end_time | default('') }}");
            const currentTime = new Date();

            // Check session timing
            if (!sessionStartTime || !sessionEndTime) {
                errorMessage.textContent = "Session schedule is unavailable.";
                errorMessage.style.display = 'block';
                return;
            }

            if (currentTime < sessionStartTime) {
                statusMessage.textContent = `The session will start on ${sessionStartTime.toLocaleString()} and end on ${sessionEndTime.toLocaleString()}.`;
                return;
            } else if (currentTime > sessionEndTime) {
                statusMessage.textContent = `The session has ended. It was scheduled from ${sessionStartTime.toLocaleString()} to ${sessionEndTime.toLocaleString()}.`;
                errorMessage.textContent = "The session has ended. Please return to the join page.";
                errorMessage.style.display = 'block';
                setTimeout(() => {
                    // Auto-terminate the session and return to the join page
                    terminateSession();
                    window.location.href = "join_session"; // Redirect to the join page after 5 seconds
                }, 5000); // Delay to show the message before redirecting
                return;
            } else {
                statusMessage.textContent = "The session is currently active.";
                joinSessionButton.style.display = 'inline-block'; // Show join button
                rootContainer.style.display = 'block'; // Show video container
            }
        };

        function initializeSession(roomID) {
            const userID = Math.floor(Math.random() * 10000).toString();
            const userName = "{{ username }}";
            const appID = 1271126531;
            const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";

            const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

            zp = ZegoUIKitPrebuilt.create(kitToken); // Assign instance to global variable

            zp.joinRoom({
                container: document.querySelector("#root"),
                scenario: {
                    mode: ZegoUIKitPrebuilt.VideoConference,
                }
            }).then(() => {
                console.log('Successfully joined the session.');

                // Schedule termination at the end of the session
                const sessionEndTime = new Date("{{ session.end_time | default('') }}");
                const timeUntilEnd = sessionEndTime.getTime() - new Date().getTime();

                if (timeUntilEnd > 0) {
                    setTimeout(() => {
                        terminateSession();
                    }, timeUntilEnd);
                } else {
                    terminateSession();
                }
            }).catch((error) => {
                console.error('Failed to join the session:', error);
                alert('Failed to join the session. Please check the Room ID or try again later.');
            });
        }

        function joinSession() {
            const roomID = document.getElementById('roomIDInput').value.trim();
            if (!roomID) {
                alert("Please enter a valid Room ID.");
                return;
            }
            initializeSession(roomID);
        }

        function terminateSession() {
            if (zp) {
                zp.leaveRoom();
                alert("The session has ended. You have been disconnected.");
                document.getElementById('root').innerHTML = ''; // Clear video container
            }
        }
    </script>
</body>
</html>
{% endblock %}
