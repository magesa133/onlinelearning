{% extends 'teacher_dashboard.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Online Sessions</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <style>
        .main-content {
            margin: 20px auto;
            padding: 20px;
            max-width: 800px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #f9f9f9;
        }
        h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        button {
            margin: 10px 0;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background: #007bff;
            color: white;
        }
        button:hover {
            background: #0056b3;
        }
        #generatedLink {
            font-weight: bold;
            color: #007bff;
        }
        #root {
            width: 100%;
            height: 400px;
            position: relative;
            margin-top: 20px;
        }
        .time-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .time-inputs input {
            padding: 5px 10px;
            font-size: 16px;
        }
        .time-inputs.hidden {
            display: none;
        }
        .expired-message {
            color: red;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h2>Manage Online Sessions</h2>

        <div class="time-inputs" id="time-inputs">
            <div>
                <label for="start-time">Start Time: </label>
                <input type="datetime-local" id="start-time" required>
            </div>
            <div>
                <label for="end-time">End Time: </label>
                <input type="datetime-local" id="end-time" required>
            </div>
        </div>

        <button onclick="createSession()" id="createSessionBtn">Create New Session</button>
        <p>Generated Link: <span id="generatedLink">None</span></p>
        <button class="fullscreen-button" onclick="toggleFullScreen()">Toggle Fullscreen</button>

        <div class="manual-entry">
            <label for="roomID">Enter Room ID:</label>
            <input type="text" id="roomID" placeholder="Enter Room ID">
            <button onclick="joinTeacherSession()">Join Session</button>
        </div>

        <div id="root"></div>

        <div id="expiredMessage" class="expired-message" style="display: none;">
            The session has expired and cannot be joined anymore.
        </div>
    </div>

    <script>
        async function createSession() {
            const roomID = "room-" + Math.floor(Math.random() * 10000);
            const sessionLink = `${window.location.origin}/join_session/${roomID}`;
            const linkDisplay = document.getElementById('generatedLink');

            const startTime = document.getElementById('start-time').value;
            const endTime = document.getElementById('end-time').value;

            if (!startTime || !endTime) {
                alert("Please set both start and end times.");
                return;
            }

            localStorage.setItem('sessionLink', sessionLink);
            localStorage.setItem('sessionEndTime', endTime);

            document.getElementById('time-inputs').classList.add('hidden');
            document.getElementById('createSessionBtn').classList.add('hidden');

            const currentTime = new Date().toISOString();

            if (new Date(endTime) > new Date(currentTime)) {
                linkDisplay.textContent = sessionLink;
            } else {
                linkDisplay.textContent = "Session ended or no active session.";
            }

            alert(`Session created successfully! Share this link with students: ${sessionLink}`);

            try {
                const response = await fetch('/create_session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        roomID,
                        sessionLink,
                        startTime,
                        endTime,
                    }),
                });

                const data = await response.json();
                if (!response.ok) console.error('Failed to save session:', data);
            } catch (error) {
                console.error('Error while saving session:', error);
            }

            if (new Date(startTime) <= new Date(currentTime) && new Date(endTime) >= new Date(currentTime)) {
                initializeSession(roomID);
            }
        }

function initializeSession(roomID) {
    try {
        const userID = Math.floor(Math.random() * 10000).toString();
        const userName = "{{ username | default('Teacher') }}";
        const appID = 1271126531;
        const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";
        const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

        const zp = ZegoUIKitPrebuilt.create(kitToken);

        zp.joinRoom({
            container: document.querySelector("#root"),
            scenario: { mode: ZegoUIKitPrebuilt.VideoConference },
            onError: (error) => {
                console.error("Error initializing session:", error);
                if (error.name === "NotAllowedError") {
                    alert("Access to camera or microphone denied. Please allow permissions and try again.");
                } else {
                    alert("An error occurred while accessing your devices. Please try again.");
                }
            },
        });
    } catch (error) {
        console.error("Session initialization failed:", error);
        alert("Unable to initialize the session. Check your devices or contact support.");
    }
}


        function joinTeacherSession() {
            const roomID = document.getElementById('roomID').value.trim();
            if (roomID) {
                initializeSession(roomID);
            } else {
                alert("Please enter a valid Room ID.");
            }
        }

        function toggleFullScreen() {
            const elem = document.querySelector("#root");
            if (!document.fullscreenElement) {
                elem.requestFullscreen().catch(err => console.warn(`Error attempting to enable full-screen mode: ${err.message}`));
            } else {
                document.exitFullscreen();
            }
        }

        window.onload = function () {
            const sessionLink = localStorage.getItem('sessionLink');
            const sessionEndTime = localStorage.getItem('sessionEndTime');
            const currentTime = new Date().toISOString();

            if (sessionLink && new Date(sessionEndTime) > new Date(currentTime)) {
                document.getElementById('generatedLink').textContent = sessionLink;
                document.getElementById('expiredMessage').style.display = 'none';
            } else {
                document.getElementById('generatedLink').textContent = "Session ended or no active session.";
                document.getElementById('expiredMessage').style.display = 'block';
                localStorage.removeItem('sessionLink');
                localStorage.removeItem('sessionEndTime');
            }
        }
    </script>
</body>
</html>
{% endblock %}












{% extends 'student_dashboard.html' %}

{% block content %}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Online Session</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js"></script>
    <style>
        #root {
            width: 100%;
            height: 100%;
            position: relative;
            left: 0;
        }
        #loading {
            font-size: 18px;
            color: #555;
            display: none;
        }
        #joinSessionButton {
            display: none;
        }
    </style>
</head>

<div class="main-content">
    <h2>Join Online Session: {{ session.session_name }}</h2>
    <p id="loading">Loading session information, please wait...</p>
    <label for="roomIDInput">Enter Room ID:</label>
    <input type="text" id="roomIDInput" placeholder="Enter Room ID">
    <button id="joinSessionButton" onclick="joinSession()">Join Session</button>
    <button class="fullscreen-button" onclick="toggleFullScreen()">Toggle Fullscreen</button>
    <p>Current Room ID: <span id="currentRoomID">{{ session.room_id }}</span></p>
    <!-- Zego UI container -->
    <div id="root"></div>
</div>

<script>
    window.onload = function () {
        // Hide the video UI and other elements until the session info is loaded
        const loadingText = document.getElementById('loading');
        const joinSessionButton = document.getElementById('joinSessionButton');
        const roomIDInput = document.getElementById('roomIDInput');
        const currentRoomIDSpan = document.getElementById('currentRoomID');

        // Show loading text while session is being fetched
        loadingText.style.display = 'block';

        const roomID = '{{ session.room_id }}';
        if (roomID) {
            // Update room ID and show the session controls
            roomIDInput.value = roomID;
            currentRoomIDSpan.textContent = roomID;

            // Enable the Join Session button once the session information is loaded
            joinSessionButton.style.display = 'inline-block';
            loadingText.style.display = 'none';  // Hide loading text
        } else {
            alert('Session information could not be retrieved.');
        }
    };

    function initializeSession(roomID) {
        const userID = Math.floor(Math.random() * 10000) + "";
        const userName = "{{ username }}";
        const appID = 1271126531;
        const serverSecret = "5261b8e7778bf38bbe00c844ca26b988";
        const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);

        const zp = ZegoUIKitPrebuilt.create(kitToken);
        zp.joinRoom({
            container: document.querySelector("#root"),
            scenario: {
                mode: ZegoUIKitPrebuilt.VideoConference,
            }
        }).then(() => {
            console.log('Successfully joined the room');
        }).catch((error) => {
            console.error('Failed to join the room:', error);
            alert('Failed to join the room. Please check the room ID or try again later.');
        });
    }

    function joinSession() {
        const roomID = document.getElementById('roomIDInput').value.trim();
        if (!roomID) {
            alert("Please enter a valid Room ID.");
            return;
        }
        document.getElementById('currentRoomID').textContent = roomID;
        initializeSession(roomID);
    }

    function toggleFullScreen() {
        const elem = document.querySelector("#root");
        if (!document.fullscreenElement) {
            elem.requestFullscreen().catch(err => {
                console.warn(`Error attempting to enable full-screen mode: ${err.message}`);
            });
        } else {
            document.exitFullscreen();
        }
    }
</script>
{% endblock %}






from flask import render_template, redirect, url_for, request, flash, jsonify
from flask_login import login_user, login_required, logout_user, current_user
from werkzeug.security import check_password_hash, generate_password_hash
from app import app, db
from models import User, OnlineSession, Assignment, Quiz, Class, Question, Teacher, Department
from datetime import datetime

# ---------- ROUTES ----------

# Home Route
@app.route('/')
def index():
    return render_template('index.html')

# Video Conference Route
@app.route('/video_conference')
@login_required
def video_conference():
    return render_template('video_conference.html', username=current_user.username)

# Join Session Page
@app.route('/join')
@login_required
def join():
    return render_template('student/join.html', username=current_user.username)

# Student Dashboard Route
@app.route('/student_dashboard')
@login_required
def student_dashboard():
    if current_user.role != 'student':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    sessions = OnlineSession.query.order_by(OnlineSession.created_at.desc()).all()
    return render_template('student_dashboard.html', sessions=sessions, username=current_user.username)

# Join Session Route for Student
@app.route('/join_session/<room_id>', methods=['GET'])
@login_required
def join_session(room_id):
    session = OnlineSession.query.filter_by(room_id=room_id).first()

    if not session:
        flash("Session not found!", 'danger')
        return redirect(url_for('student_dashboard'))

    return render_template('student/join.html', session=session, username=current_user.username)

# Teacher Dashboard Route
@app.route('/teacher_dashboard')
@login_required
def teacher_dashboard():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    classes = Class.query.filter_by(teacher_id=current_user.id).all()
    return render_template('teacher_dashboard.html', username=current_user.username, classes=classes)

# Admin Dashboard Route
# Admin Dashboard Route
@app.route('/admin_dashboard')
@login_required
def admin_dashboard():
    # Check if the current user is an admin
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    # Example of fetching relevant data for the admin (e.g., teachers, students, etc.)
    teachers = User.query.filter_by(role='teacher').all()
    students = User.query.filter_by(role='student').all()
    classes = Class.query.all()  # Adjust as needed for class data
    # reports = Report.query.all()  # Adjust as needed for report data

    # Render the admin dashboard template
    return render_template('admin_dashboard.html', username=current_user.username, teachers=teachers, students=students, classes=classes)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email').strip()
        password = request.form.get('password').strip()
        user = User.query.filter_by(email=email).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('Login successful!', 'success')
            # Redirect based on user role (student, teacher, or admin)
            if user.role == 'student':
                return redirect(url_for('student_dashboard'))
            elif user.role == 'teacher':
                return redirect(url_for('teacher_dashboard'))
            elif user.role == 'admin':  # Redirect admin to admin dashboard
                return redirect(url_for('admin_dashboard'))

        flash('Invalid email or password!', 'danger')

    return render_template('login.html')

# Registration Route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username').strip().capitalize()
        email = request.form.get('email').strip()
        password = request.form.get('password').strip()
        confirm_password = request.form.get('confirm_password').strip()

        if password != confirm_password:
            flash('Passwords do not match!', 'danger')
            return redirect(url_for('register'))

        if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
            flash('Username or email already exists!', 'danger')
            return redirect(url_for('register'))

        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_user = User(username=username, email=email, password=hashed_password, role='student')
        db.session.add(new_user)
        db.session.commit()

        login_user(new_user)
        flash('Registration successful!', 'success')
        return redirect(url_for('student_dashboard'))

    return render_template('register.html')

# Logout Route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

# ---------- SESSION MANAGEMENT ----------

# Start Online Session (Teacher)
@app.route('/start_session', methods=['POST'])
@login_required
def start_session():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    try:
        room_id = f"room-{int(datetime.now().timestamp())}"
        session_name = request.form.get('session_name', 'Default Session Name')
        session_link = f"{request.host_url}join_session/{room_id}"

        session = OnlineSession(
            room_id=room_id,
            session_name=session_name,
            session_link=session_link,
            created_by=current_user.id,
            start_time=datetime.utcnow(),
            end_time=datetime.utcnow()
        )
        db.session.add(session)
        db.session.commit()

        return jsonify({'roomID': room_id, 'sessionLink': session_link}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# ---------- QUIZZES AND ASSIGNMENTS ----------

@app.route('/create_assignment', methods=['GET', 'POST'])
@login_required
def create_assignment():
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        title = request.form.get('title')
        description = request.form.get('description')
        due_date = request.form.get('due_date')
        class_id = request.form.get('class_id')

        # Create a new Assignment instance
        assignment = Assignment(
            title=title,
            description=description,
            due_date=datetime.strptime(due_date, '%Y-%m-%d'),
            class_id=class_id,
            created_by=current_user.id
        )
        db.session.add(assignment)
        db.session.commit()

        flash('Assignment created successfully!', 'success')
        return redirect(url_for('teacher_dashboard'))

    # Fetch all the classes taught by the teacher
    classes = Class.query.filter_by(teacher_id=current_user.id).all()
    return render_template('teacher/create_assignment.html', classes=classes)

# Add Quiz (Teacher)
@app.route('/add_quiz/<int:session_id>', methods=['GET', 'POST'])
@login_required
def add_quiz(session_id):
    if current_user.role != 'teacher':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        title = request.form.get('title')
        questions = request.form.getlist('questions')
        options = request.form.getlist('options')
        correct_answers = request.form.getlist('correct_answers')

        quiz = Quiz(title=title, session_id=session_id, class_id=None)
        db.session.add(quiz)
        db.session.flush()

        for question, option, correct_answer in zip(questions, options, correct_answers):
            question_obj = Question(
                text=question,
                options=option,
                correct_option=correct_answer,
                quiz_id=quiz.id
            )
            db.session.add(question_obj)

        db.session.commit()
        flash('Quiz added successfully!', 'success')
        return redirect(url_for('teacher_dashboard'))

    return render_template('add_quiz.html', session_id=session_id)

@app.route('/get_session_data/<roomID>', methods=['GET'])
def get_session_data(roomID):
    session = get_session_from_db(roomID)  # Fetch session from your database
    if not session:
        return jsonify({"error": "Session not found"}), 404
    
    return jsonify({
        "startTime": session.start_time.isoformat(),
        "endTime": session.end_time.isoformat(),
    })


@app.route('/create_session', methods=['POST'])
@login_required
def create_session():
    if current_user.role != 'teacher':
        return jsonify({'error': 'Access denied'}), 403

    try:
        # Parse JSON data from the request
        data = request.get_json()
        room_id = data.get('roomID')
        session_link = data.get('sessionLink')
        start_time = data.get('startTime')
        end_time = data.get('endTime')

        # Ensure all required data is present
        if not all([room_id, session_link, start_time, end_time]):
            return jsonify({'error': 'Missing required fields'}), 400

        # Create a new session record
        new_session = OnlineSession(
            room_id=room_id,
            session_name="Default Session Name",  # Adjust as needed
            session_link=session_link,
            start_time=start_time,
            end_time=end_time,
            created_by=current_user.id
        )

        # Add to database and commit
        db.session.add(new_session)
        db.session.commit()

        return jsonify({'message': 'Session created successfully!'}), 201

    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'An error occurred: {str(e)}'}), 500

@app.route('/add_teacher', methods=['GET', 'POST'])
@login_required
def add_teacher():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    # Fetch all departments
    departments = Department.query.all()

    if request.method == 'POST':
        # Collect form data
        username = request.form.get('username').strip()
        email = request.form.get('email').strip()
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        teacher_name = request.form.get('teacher_name').strip()
        subject = request.form.get('subject').strip()
        department_id = request.form.get('department')

        # Validation
        errors = []

        # Check for required fields
        if not username or not email or not password or not confirm_password or not teacher_name or not subject or not department_id:
            errors.append("All fields are required.")
        if password != confirm_password:
            errors.append("Passwords do not match.")

        # Check if username or email already exists
        existing_user = User.query.filter((User.username == username) | (User.email == email)).first()
        if existing_user:
            errors.append("A user with this username or email already exists.")

        if errors:
            # Return errors with previously entered data
            return render_template(
                'admin/add_teacher.html',
                errors=errors,
                departments=departments,
                form_data={
                    'username': username,
                    'email': email,
                    'teacher_name': teacher_name,
                    'subject': subject,
                    'department_id': department_id
                }
            )

        # Hash the password and create user
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_teacher_user = User(username=username, email=email, password=hashed_password, role='teacher')
        db.session.add(new_teacher_user)
        db.session.commit()

        # Create teacher record
        teacher = Teacher(user_id=new_teacher_user.id, teacher_name=teacher_name, subject=subject, department_id=department_id)
        db.session.add(teacher)
        db.session.commit()

        flash('Teacher added successfully!', 'success')
        return redirect(url_for('add_teacher'))

    return render_template('admin/add_teacher.html', departments=departments)


@app.route('/add_department', methods=['GET', 'POST'])
@login_required
def add_department():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    if request.method == 'POST':
        name = request.form.get('name').strip()
        description = request.form.get('description').strip()

        if Department.query.filter_by(name=name).first():
            flash('Department already exists!', 'danger')
            return render_template('admin/add_department.html')

        new_department = Department(name=name, description=description)
        db.session.add(new_department)
        db.session.commit()

        flash('Department added successfully!', 'success')
        return render_template('admin/add_department.html')

    return render_template('admin/add_department.html')

@app.route('/departments', methods=['GET'])
@login_required
def view_departments():
    if current_user.role != 'admin':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    departments = Department.query.all()
    return render_template('admin/view_departments.html', departments=departments)

@app.route('/delete_department/<int:id>', methods=['POST'])
@login_required
def delete_department(id):
    if current_user.role != 'admin':
        flash('Access denied.', 'danger')
        return redirect(url_for('index'))

    department = Department.query.get_or_404(id)
    db.session.delete(department)
    db.session.commit()

    flash('Department deleted successfully!', 'success')
    return redirect(url_for('view_departments'))

@app.route('/add_class', methods=['GET', 'POST'])
@login_required
def add_class():
    if current_user.role != 'admin':
        flash('Access denied. You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    teachers = Teacher.query.all()  # Fetch all teachers for the dropdown list

    if request.method == 'POST':
        class_name = request.form.get('class_name', '').strip()
        subject = request.form.get('subject', '').strip()
        teacher_id = request.form.get('teacher_id')

        # Validation
        if not class_name or not subject or not teacher_id:
            flash('All fields are required. Please fill out the form correctly.', 'danger')
            return render_template('admin/add_class.html', teachers=teachers)

        try:
            # Ensure teacher exists
            teacher = Teacher.query.get(teacher_id)
            if not teacher:
                flash('Invalid teacher selected.', 'danger')
                return render_template('admin/add_class.html', teachers=teachers)

            # Check for duplicate class names (optional constraint)
            existing_class = Class.query.filter_by(name=class_name).first()
            if existing_class:
                flash(f'A class with the name "{class_name}" already exists!', 'danger')
                return render_template('admin/add_class.html', teachers=teachers)

            # Create and save the new class
            new_class = Class(name=class_name, subject=subject, teacher_id=teacher_id)
            db.session.add(new_class)
            db.session.commit()

            flash(f'Class "{class_name}" added successfully!', 'success')
            return redirect(url_for('add_class'))

        except Exception as e:
            db.session.rollback()
            flash(f'Error: {str(e)}', 'danger')
            return render_template('admin/add_class.html', teachers=teachers)

    return render_template('admin/add_class.html', teachers=teachers)





    from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin

# Initialize the db object here
db = SQLAlchemy()

# User Roles Enum for clarity
class UserRole:
    STUDENT = 'student'
    TEACHER = 'teacher'

# User Model (student/teacher)
class User(UserMixin, db.Model):
    __tablename__ = 'user'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False, index=True)
    password = db.Column(db.String(200), nullable=False)
    role = db.Column(db.String(50), nullable=False)

    # Relationship with Teacher model (one-to-one)
    teacher = db.relationship('Teacher', backref='user', uselist=False)

    def __repr__(self):
        return f"<User {self.username}>"

class Class(db.Model):
    __tablename__ = 'class'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    subject = db.Column(db.String(150), nullable=False)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=False)

    # Define relationship with Teacher
    teacher = db.relationship('Teacher', back_populates='classes')

    def __repr__(self):
        return f"<Class {self.name}>"

# Many-to-Many Relationship for Students and Classes
class ClassStudent(db.Model):
    __tablename__ = 'class_student'

    id = db.Column(db.Integer, primary_key=True)
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'))
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return f"<ClassStudent {self.class_id} - {self.student_id}>"

# Assignment Model
class Assignment(db.Model):
    __tablename__ = 'assignment'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    content = db.Column(db.Text, nullable=False)
    due_date = db.Column(db.DateTime, nullable=False)
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'), nullable=False)

    # Use a unique backref name
    class_ = db.relationship('Class', backref='class_assignments')

    def __repr__(self):
        return f"<Assignment {self.title}>"

# Quiz Model
class Quiz(db.Model):
    __tablename__ = 'quiz'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    questions = db.relationship('Question', backref='quiz', lazy=True, cascade='all, delete')
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'), nullable=False)
    session_id = db.Column(db.Integer, db.ForeignKey('online_session.id'), nullable=True)

    def __repr__(self):
        return f"<Quiz {self.title}>"

# Question Model
class Question(db.Model):
    __tablename__ = 'question'

    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    options = db.Column(db.JSON, nullable=False)  # Example: {'A': 'Option 1', 'B': 'Option 2'}
    correct_option = db.Column(db.String(1), nullable=False)  # Example: 'A', 'B', 'C', 'D'
    quiz_id = db.Column(db.Integer, db.ForeignKey('quiz.id'), nullable=False)

    def __repr__(self):
        return f"<Question {self.text[:30]}...>"

# Online Session Model
class OnlineSession(db.Model):
    __tablename__ = 'online_session'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    room_id = db.Column(db.String(100), nullable=False, unique=True, index=True)
    session_name = db.Column(db.String(200), nullable=False)
    session_link = db.Column(db.String(500), nullable=False)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    start_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    end_time = db.Column(db.DateTime, nullable=True)

    def __repr__(self):
        return f"<OnlineSession {self.session_name} (Room: {self.room_id})>"

# Teacher Model
class Teacher(db.Model):
    __tablename__ = 'teacher'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # Link to User
    teacher_name = db.Column(db.String(100))
    subject = db.Column(db.String(100))
    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)

    # Relationship with Department
    department = db.relationship('Department', backref='teachers')

    # Relationship with Class (one-to-many)
    classes = db.relationship('Class', back_populates='teacher')

    def __repr__(self):
        return f"<Teacher {self.teacher_name}>"

# Department Model
class Department(db.Model):
    __tablename__ = 'department'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(255), nullable=True)

    def __repr__(self):
        return f"<Department {self.name}>"






from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin

# Initialize the db object here
db = SQLAlchemy()

# User Roles Enum for clarity
class UserRole:
    STUDENT = 'student'
    TEACHER = 'teacher'

# User Model (student/teacher)
class User(UserMixin, db.Model):
    __tablename__ = 'user'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False, index=True)
    password = db.Column(db.String(200), nullable=False)
    role = db.Column(db.String(50), nullable=False)
    face_image = db.Column(db.String(200), nullable=True)  # Path to the saved face image

    # Relationship with Teacher model (one-to-one)
    teacher = db.relationship('Teacher', backref='user', uselist=False)

    # Back-reference to enrolled classes through ClassStudent
    enrolled_classes = db.relationship(
        'ClassStudent',
        back_populates='student',
        cascade='all, delete-orphan'
    )

    def __repr__(self):
        return f"<User {self.username}>"

class Class(db.Model):
    __tablename__ = 'class'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    subject = db.Column(db.String(150), nullable=False)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=False)

    # Relationship with Teacher
    teacher = db.relationship('Teacher', back_populates='classes')
    
    # Relationship with ClassStudent (Many-to-Many)
    students = db.relationship('ClassStudent', back_populates='class_')

    def __repr__(self):
        return f"<Class {self.name}>"

# Many-to-Many Relationship for Students and Classes
class ClassStudent(db.Model):
    __tablename__ = 'class_student'

    id = db.Column(db.Integer, primary_key=True)
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'))
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    # Back-populate relationships
    class_ = db.relationship('Class', back_populates='students')
    student = db.relationship('User', back_populates='enrolled_classes')

    def __repr__(self):
        return f"<ClassStudent {self.class_id} - {self.student_id}>"
    
# Assignment Model
class Assignment(db.Model):
    __tablename__ = 'assignment'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    description = db.Column(db.Text, nullable=False)  # Added description field
    due_date = db.Column(db.DateTime, nullable=False)
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'), nullable=False)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # Reference to the teacher

    # Relationships
    class_ = db.relationship('Class', backref='class_assignments')
    teacher = db.relationship('User', backref='created_assignments')

    def __repr__(self):
        return f"<Assignment {self.title}>"
    
# Submission Model
class Submission(db.Model):
    __tablename__ = 'submissions'

    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)
    assignment_id = db.Column(db.Integer, db.ForeignKey('assignment.id'), nullable=False)
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    assignment = db.relationship('Assignment', backref='submissions')
    student = db.relationship('User', backref='submissions')

    def __repr__(self):
        return f"<Submission by {self.student.username} for {self.assignment.title}>"

# Quiz Model
class Quiz(db.Model):
    __tablename__ = 'quiz'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    questions = db.relationship('Question', backref='quiz', lazy=True, cascade='all, delete')
    class_id = db.Column(db.Integer, db.ForeignKey('class.id'), nullable=False)
    session_id = db.Column(db.Integer, db.ForeignKey('online_session.id'), nullable=True)

    def __repr__(self):
        return f"<Quiz {self.title}>"

# Question Model
class Question(db.Model):
    __tablename__ = 'question'

    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    options = db.Column(db.JSON, nullable=False)  # Example: {'A': 'Option 1', 'B': 'Option 2'}
    correct_option = db.Column(db.String(1), nullable=False)  # Example: 'A', 'B', 'C', 'D'
    quiz_id = db.Column(db.Integer, db.ForeignKey('quiz.id'), nullable=False)

    def __repr__(self):
        return f"<Question {self.text[:30]}...>"

# Online Session Model
class OnlineSession(db.Model):
    __tablename__ = 'online_session'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    room_id = db.Column(db.String(100), nullable=False, unique=True, index=True)
    session_name = db.Column(db.String(200), nullable=False)
    session_link = db.Column(db.String(500), nullable=False)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    start_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    end_time = db.Column(db.DateTime, nullable=True)

    def __repr__(self):
        return f"<OnlineSession {self.session_name} (Room: {self.room_id})>"

# Teacher Model
class Teacher(db.Model):
    __tablename__ = 'teacher'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # Link to User
    teacher_name = db.Column(db.String(100))
    subject = db.Column(db.String(100))
    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)

    # Relationship with Department
    department = db.relationship('Department', backref='teachers')
    
    # Relationship with Class (one-to-many)
    classes = db.relationship('Class', back_populates='teacher')

    def __repr__(self):
        return f"<Teacher {self.teacher_name}>"


# Department Model
class Department(db.Model):
    __tablename__ = 'department'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(255), nullable=True)

    def __repr__(self):
        return f"<Department {self.name}>"
